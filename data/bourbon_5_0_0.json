[
  {
    "description": "Provides a quick method for targeting `border-color` on specific sides of a\nbox. Use a `null` value to “skip” a side.\n\n",
    "commentRange": {
      "start": 3,
      "end": 21
    },
    "context": {
      "type": "mixin",
      "name": "border-color",
      "code": "\n  @include _directional-property(border, color, $values...);\n",
      "line": {
        "start": 23,
        "end": 25
      }
    },
    "parameter": [
      {
        "type": "arglist",
        "name": "values",
        "description": "List of colors, defined as CSS shorthand.\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  @include border-color(#a60b55 #76cd9c null #e8ae1a);\n}"
      },
      {
        "type": "css",
        "code": ".element {\n  border-left-color: #e8ae1a;\n  border-right-color: #76cd9c;\n  border-top-color: #a60b55;\n}"
      }
    ],
    "require": [
      {
        "type": "mixin",
        "name": "_directional-property",
        "external": false
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/library/_border-color.scss",
      "name": "_border-color.scss"
    }
  },
  {
    "description": "Provides an easy way to include a clearfix for containing floats.\n\n",
    "commentRange": {
      "start": 3,
      "end": 17
    },
    "context": {
      "type": "mixin",
      "name": "clearfix",
      "code": "\n  &::after {\n    clear: both;\n    content: \"\";\n    display: block;\n  }\n",
      "line": {
        "start": 19,
        "end": 25
      }
    },
    "link": [
      {
        "url": "http://goo.gl/yP5hiZ",
        "caption": ""
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  @include clearfix;\n}"
      },
      {
        "type": "css",
        "code": ".element::after {\n  clear: both;\n  content: \"\";\n  display: block;\n}"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/library/_clearfix.scss",
      "name": "_clearfix.scss"
    }
  },
  {
    "description": "Switches between two colors based on the lightness of a another color. Great\nfor building button styles.\n\n",
    "commentRange": {
      "start": 3,
      "end": 40
    },
    "context": {
      "type": "function",
      "name": "contrast-switch",
      "code": "\n\n  @return if(_is-light($base-color), $dark-color, $light-color);\n",
      "line": {
        "start": 42,
        "end": 49
      }
    },
    "parameter": [
      {
        "type": "color",
        "name": "base-color",
        "description": "The color to evaluate lightness against.\n"
      },
      {
        "type": "color",
        "name": "dark-color",
        "default": "#000",
        "description": "The color to be output when `$base-color` is light.\n"
      },
      {
        "type": "color",
        "name": "light-color",
        "default": "#fff",
        "description": "The color to be output when `$base-color` is dark.\n"
      }
    ],
    "return": {
      "type": "color"
    },
    "example": [
      {
        "type": "scss",
        "code": ".first-element {\n  color: contrast-switch(#bae6e6);\n}\n\n.second-element {\n  $button-color: #2d72d9;\n  background-color: $button-color;\n  color: contrast-switch($button-color, #222, #eee);\n}"
      },
      {
        "type": "css",
        "code": ".first-element {\n  color: #000;\n}\n\n.second-element {\n  background-color: #2d72d9;\n  color: #eee;\n}"
      }
    ],
    "require": [
      {
        "type": "function",
        "name": "_is-light",
        "external": false
      }
    ],
    "since": [
      {
        "version": "5.0.0"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/library/_contrast-switch.scss",
      "name": "_contrast-switch.scss"
    }
  },
  {
    "description": "Hides an element visually while still allowing the content to be accessible\nto assistive technology, e.g. screen readers. Passing `unhide` will reverse\nthe affects of the hiding, which is handy for showing the element on focus,\nfor example.\n\n",
    "commentRange": {
      "start": 3,
      "end": 45
    },
    "context": {
      "type": "mixin",
      "name": "hide-visually",
      "code": "\n  @if $toggle == \"hide\" {\n    border: 0;\n    clip: rect(1px, 1px, 1px, 1px);\n    clip-path: circle(1% at 1% 1%);\n    height: 1px;\n    overflow: hidden;\n    padding: 0;\n    position: absolute;\n    width: 1px;\n  } @elseif $toggle == \"unhide\" {\n    clip: auto;\n    clip-path: none;\n    height: auto;\n    overflow: visible;\n    position: static;\n    width: auto;\n  }\n",
      "line": {
        "start": 47,
        "end": 65
      }
    },
    "link": [
      {
        "url": "http://goo.gl/Vf1TGn",
        "caption": ""
      }
    ],
    "parameter": [
      {
        "type": "string",
        "name": "toggle",
        "default": "hide",
        "description": "Accepts `hide` or `unhide`. `unhide` reverses the affects of `hide`.\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  @include hide-visually;\n\n  &:active,\n  &:focus {\n    @include hide-visually(unhide);\n  }\n}"
      },
      {
        "type": "css",
        "code": ".element {\n  border: 0;\n  clip: rect(1px, 1px, 1px, 1px);\n  clip-path: circle(1% at 1% 1%);\n  height: 1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n.hide-visually:active,\n.hide-visually:focus {\n  clip: auto;\n  clip-path: none;\n  height: auto;\n  overflow: visible;\n  position: static;\n  width: auto;\n}"
      }
    ],
    "since": [
      {
        "version": "5.0.0"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "bourbon/library/_hide-visually.scss",
      "name": "_hide-visually.scss"
    }
  },
  {
    "description": "Mixes a color with black.\n\n",
    "commentRange": {
      "start": 3,
      "end": 20
    },
    "context": {
      "type": "function",
      "name": "shade",
      "code": "\n\n  @return mix(#000, $color, $percent);\n",
      "line": {
        "start": 22,
        "end": 28
      }
    },
    "parameter": [
      {
        "type": "color",
        "name": "color"
      },
      {
        "type": "number (percentage)",
        "name": "percent",
        "description": "The amount of black to be mixed in.\n"
      }
    ],
    "return": {
      "type": "color"
    },
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  background-color: shade(#ffbb52, 60%);\n}"
      },
      {
        "type": "css",
        "code": ".element {\n  background-color: #664a20;\n}"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "bourbon/library/_shade.scss",
      "name": "_shade.scss"
    }
  },
  {
    "description": "Sets the `width` and `height` of the element in one statement.\n\n",
    "commentRange": {
      "start": 3,
      "end": 29
    },
    "context": {
      "type": "mixin",
      "name": "size",
      "code": "\n\n  @if _is-size($height) {\n    height: $height;\n  } @else {\n    @error \"`#{$height}` is not a valid length for the `$height` parameter \" +\n           \"in the `size` mixin.\";\n  }\n\n  @if _is-size($width) {\n    width: $width;\n  } @else {\n    @error \"`#{$width}` is not a valid length for the `$width` parameter \" +\n           \"in the `size` mixin.\";\n  }\n",
      "line": {
        "start": 31,
        "end": 49
      }
    },
    "parameter": [
      {
        "type": "number (with unit) | string",
        "name": "width"
      },
      {
        "type": "number (with unit) | string",
        "name": "height",
        "default": "$width"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".first-element {\n  @include size(2em);\n}\n\n.second-element {\n  @include size(auto, 10em);\n}"
      },
      {
        "type": "css",
        "code": ".first-element {\n  width: 2em;\n  height: 2em;\n}\n\n.second-element {\n  width: auto;\n  height: 10em;\n}"
      }
    ],
    "require": [
      {
        "type": "function",
        "name": "_is-size",
        "external": false
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "throw": [
      "`#{$height}` is not a valid length for the `$height` parameter ",
      "`#{$width}` is not a valid length for the `$width` parameter "
    ],
    "file": {
      "path": "bourbon/library/_size.scss",
      "name": "_size.scss"
    }
  }
]
